-- MySQL Script generated by MySQL Workbench
-- Fri Mar 17 15:39:53 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema social_blog
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema social_blog
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `social_blog` DEFAULT CHARACTER SET utf8 ;
USE `social_blog` ;

-- -----------------------------------------------------
-- Table `social_blog`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`address` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`address` (
  `address_id` VARCHAR(15) NOT NULL COMMENT 'a hash inter value',
  `address_house_no` INT NOT NULL DEFAULT ####,
  `address_street_name` VARCHAR(45) NOT NULL DEFAULT '####',
  `address_city` VARCHAR(45) NOT NULL,
  `address_region` VARCHAR(45) NOT NULL,
  `address_country` VARCHAR(45) NOT NULL,
  `address_zipcode` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`address_id`),
  UNIQUE INDEX `address_id_UNIQUE` (`address_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `social_blog`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`users` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`users` (
  `user_id` VARCHAR(20) NOT NULL COMMENT 'the id is a variable character of 20 indices. a mixture of social blog initial characters (sb) then the date of account creation and 10 indices interger value all concatinated. ',
  `user_name` VARCHAR(45) NOT NULL,
  `user_email` VARCHAR(45) NOT NULL,
  `user_password` VARCHAR(45) NOT NULL COMMENT 'the password is a concatination of alphanumeric characters and special characters. it should have a minimum lenght of 8',
  `user_dob` DATE NOT NULL,
  `user_contact` VARCHAR(45) NOT NULL,
  `user_gender` VARCHAR(6) NOT NULL,
  `user_status` VARCHAR(8) NOT NULL,
  `address_id` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`user_id`, `address_id`),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC) VISIBLE,
  UNIQUE INDEX `user_email_UNIQUE` (`user_email` ASC) VISIBLE,
  UNIQUE INDEX `user_contact_UNIQUE` (`user_contact` ASC) VISIBLE,
  INDEX `fk_users_address1_idx` (`address_id` ASC) VISIBLE,
  CONSTRAINT `fk_users_address1`
    FOREIGN KEY (`address_id`)
    REFERENCES `social_blog`.`address` (`address_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `social_blog`.`posts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`posts` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`posts` (
  `post_id` VARCHAR(11) NOT NULL COMMENT 'the id is a hash value of 11 character (#0000000000)',
  `post_date` DATE NOT NULL,
  `post_title` VARCHAR(45) NOT NULL,
  `post_content` LONGTEXT NOT NULL,
  `post_likes` INT NOT NULL DEFAULT 0,
  `post_dislikes` INT NOT NULL DEFAULT 0,
  `post_engagements` INT NOT NULL,
  `post_commenting_state` TINYINT NOT NULL COMMENT 'his discribes wether or not comments are allowed on the post. it value is boolean of 1 for commenting allow and 0 for no commenting',
  `user_id` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`post_id`),
  UNIQUE INDEX `post_id_UNIQUE` (`post_id` ASC) VISIBLE,
  INDEX `fk_posts_users_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_posts_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `social_blog`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `social_blog`.`comments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`comments` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`comments` (
  `comment_id` VARCHAR(15) NOT NULL,
  `comment_content` LONGTEXT NOT NULL,
  `comment_date` DATE NOT NULL,
  `comment_likes` INT NOT NULL DEFAULT 0,
  `comment_dislikes` INT NOT NULL DEFAULT 0,
  `post_id` VARCHAR(11) NOT NULL,
  `user_id` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`comment_id`),
  UNIQUE INDEX `comment_id_UNIQUE` (`comment_id` ASC) VISIBLE,
  INDEX `fk_comments_posts1_idx` (`post_id` ASC) VISIBLE,
  INDEX `fk_comments_users1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_comments_posts1`
    FOREIGN KEY (`post_id`)
    REFERENCES `social_blog`.`posts` (`post_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comments_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `social_blog`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `social_blog`.`comment_replies`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`comment_replies` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`comment_replies` (
  `reply_id` VARCHAR(20) NOT NULL COMMENT 'a concatination of comment id plus reply',
  `comment_id` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`reply_id`),
  UNIQUE INDEX `reply_id_UNIQUE` (`reply_id` ASC) VISIBLE,
  INDEX `fk_comment_replies_comments1_idx` (`comment_id` ASC) VISIBLE,
  CONSTRAINT `fk_comment_replies_comments1`
    FOREIGN KEY (`comment_id`)
    REFERENCES `social_blog`.`comments` (`comment_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `social_blog`.`files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`files` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`files` (
  `file_id` VARCHAR(15) NOT NULL COMMENT 'it a hash interger value of 15 characters',
  `file_url` VARCHAR(200) NOT NULL,
  `file_for` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`file_id`),
  UNIQUE INDEX `file_id_UNIQUE` (`file_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `social_blog`.`user_has_files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`user_has_files` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`user_has_files` (
  `user_id` VARCHAR(20) NOT NULL,
  `file_id` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`user_id`, `file_id`),
  INDEX `fk_users_has_files_files1_idx` (`file_id` ASC) VISIBLE,
  INDEX `fk_users_has_files_users1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_users_has_files_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `social_blog`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_has_files_files1`
    FOREIGN KEY (`file_id`)
    REFERENCES `social_blog`.`files` (`file_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `social_blog`.`post_has_files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`post_has_files` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`post_has_files` (
  `post_id` VARCHAR(11) NOT NULL,
  `file_id` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`post_id`, `file_id`),
  INDEX `fk_posts_has_files_files1_idx` (`file_id` ASC) VISIBLE,
  INDEX `fk_posts_has_files_posts1_idx` (`post_id` ASC) VISIBLE,
  CONSTRAINT `fk_posts_has_files_posts1`
    FOREIGN KEY (`post_id`)
    REFERENCES `social_blog`.`posts` (`post_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_posts_has_files_files1`
    FOREIGN KEY (`file_id`)
    REFERENCES `social_blog`.`files` (`file_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `social_blog`.`comment_has_files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `social_blog`.`comment_has_files` ;

CREATE TABLE IF NOT EXISTS `social_blog`.`comment_has_files` (
  `comment_id` VARCHAR(15) NOT NULL,
  `file_id` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`comment_id`, `file_id`),
  INDEX `fk_comments_has_files_files1_idx` (`file_id` ASC) VISIBLE,
  INDEX `fk_comments_has_files_comments1_idx` (`comment_id` ASC) VISIBLE,
  CONSTRAINT `fk_comments_has_files_comments1`
    FOREIGN KEY (`comment_id`)
    REFERENCES `social_blog`.`comments` (`comment_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comments_has_files_files1`
    FOREIGN KEY (`file_id`)
    REFERENCES `social_blog`.`files` (`file_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
